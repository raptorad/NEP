#ifndef ATTACK_ECH
#define ATTACK_ECH

////    Declarations    ////

state AttackingPoint;
state AttackingTarget;
state EndAttackingTarget;
state WaitToEndAttackPoint;
state WaitToEndAttackTarget;
state MovingToHoldAreaPos;
state MovingAndAttack;
#ifdef INFANTRY_EC
state InfantryAttackingPointStopMoving;
state InfantryWaitingToEndAttackPoint;
state InfantryWaitingToEndAttackTarget;
#endif

state MovingBeforeAttack;
	string sUnitIDName; 
unit m_uTarget;
int  m_nTargetX;
int  m_nTargetY;
int  m_nMoveToTargetState;
int  m_nMoveToTargetFlags;
int  m_bAutoTarget;
int  m_bEnemyTarget;
int  m_bNotifiedMusic;
int  m_bArmedState;
int  m_nFindNewTargetCounter;
int  m_nMoveToAttackCnt;
int  m_bSetHoldFireInCamouflageMode;
int  m_nHoldPosX;
int  m_nHoldPosY;
int  m_bIsMovingAndAttack;
int  m_nLastNotVisibleTargetTick;
int t;

consts //m_nMoveToTargetState
{
    eMoveStop = 0;
    eMoveTurnToTarget = 1;
    eMoveToTarget = 2;
    eMoveAwayFromTarget = 3;
    eMoveAroundTarget = 4;
}//|

consts //movementMode
{
    eModeHoldArea     = 0;
    eModeHoldPosition = 1;
}//|

consts //attackMode
{
    eModeFireAtWill = 0;
    eModeHoldFire   = 1;
}//|

consts//Unit Type
{
	eFleet=1;
	eBomber=2;
	eArtillery=3;
}//|

consts
{
#ifdef PLANE_EC
    eHoldAreaRange = 18;
	eHoldAreaRangeHelicopter = 24; //musi miec wieksze bo przez caly czas krazy, dodane bo nie kompilowalo sie, zmienic??
#else
    eHoldAreaRange = 12;
	eHoldAreaRangeHelicopter = 24; //musi miec wieksze bo przez caly czas krazy 
#endif
    eFindNewTargetCounter = 12;//co ok. 5 tickow == co 60 tickow
	eFindNewTargetCounterHelicopter = 48; //ze wzgledu na duzy czas przebywania poza zasiegiem
    eAttackNotVisibleDelayTicks = 100;
}//|

enum movementMode
{
    TRL_MOVEMENTMODE_0 item ITEM_MOVEMENTMODE_0,
    TRL_MOVEMENTMODE_1 item ITEM_MOVEMENTMODE_1,
multi:
    TRL_MOVEMENTMODE_X item ITEM_MOVEMENTMODE_X
}//|

enum attackMode
{
    TRL_ATTACKMODE_0 item ITEM_ATTACKMODE_0,
    TRL_ATTACKMODE_1 item ITEM_ATTACKMODE_1,
multi:
    TRL_ATTACKMODE_X item ITEM_ATTACKMODE_X
}//|

////    Functions    ////


function void ResetAttackTarget()
{
    m_uTarget = null;
    SetAttackTarget(null);
    //nie kasujemy m_bAutoTarget bo bedzie sprawdzane w EndAttackingTarget
    m_bEnemyTarget = false;
    m_bNotifiedMusic = false;
    m_nLastNotVisibleTargetTick = 0;
}//|

function void SetPointTarget(int nX, int nY)
{
    ResetAttackTarget();
    m_nTargetX = nX;
    m_nTargetY = nY;
}//|

function int StartMoveToAttackPoint(int nX, int nY)
{
    int nInRange;

    m_nMoveToTargetFlags = 0;
    nInRange = IsPointInRange(nX, nY);
	
	m_nMoveToX = nX;
	m_nMoveToY = nY;
	
    if (nInRange == eInRangeGoodHit)
    {
        if (IsMoving())
        {
#ifdef PLANE_EC
            CallMoveToPoint(nX, nY);
#else
			if(!IsHelicopterMove()) {
            	CallStopMoving();
			}
#endif

        }
        m_nMoveToTargetState = eMoveStop;
    }
    else if (nInRange == eInRangeBadAngleAlpha)
    {
#ifdef PLANE_EC
        CallMoveToPoint(nX, nY);
#else
        if (IsMoving() && !IsMovingTurning())
        {
			if(!IsHelicopterMove()) {
            	CallStopMoving();
            	m_nMoveToTargetState = eMoveStop;
			}
        }
        else
        {
            CallTurnToAngle(GetCannonAngleToPoint(nX, nY));
            m_nMoveToTargetState = eMoveTurnToTarget;
        }
#endif
    }
    else if (nInRange == eInRangeTooClose)
    {
        if (!IsImmobileUnitOrCantMoveInCurrentState())
        {
            MoveAwayFromPoint(nX, nY, G2A(2));
            m_nMoveToTargetState = eMoveAwayFromTarget;
        }
    }
    else
    {
        if (!IsImmobileUnitOrCantMoveInCurrentState())
        {
            CallMoveToPoint(nX, nY);
            m_nMoveToTargetState = eMoveToTarget;
            m_nMoveToTargetFlags = (1 << eMoveToTarget);
        }
    }
    return nInRange;
}//|

function void SetTarget(unit uTarget, int bAutoTarget)
{
    TRACE2("SetTarget ", uTarget);
    ResetAttackTarget();
    m_uTarget = uTarget;
    SetAttackTarget(m_uTarget);
    m_nTargetX = m_uTarget.GetLocationX();
    m_nTargetY = m_uTarget.GetLocationY();
    m_bEnemyTarget = IsEnemy(uTarget);
    m_bAutoTarget = bAutoTarget;
    m_bNotifiedMusic = false;
    m_nFindNewTargetCounter = eFindNewTargetCounter;
    m_nMoveToAttackCnt = 0;
    m_nLastNotVisibleTargetTick = 0;
}//|

function int StartMoveToAttackTarget(unit uTarget, int bAutoTarget)
{
    int nInRange;
    int nShootCount;

    ASSERT(uTarget != null);
    m_nMoveToTargetFlags = 0;
    nInRange = IsTargetInRange(uTarget, bAutoTarget);
	
	m_nMoveToX = uTarget.GetLocationX();
	m_nMoveToY = uTarget.GetLocationY();
	
    if (nInRange == eInRangeGoodHit)
    {
        if (IsMoving())
        {
#ifdef PLANE_EC
            CallMoveToPoint(uTarget.GetLocationX(), uTarget.GetLocationY());
#else
			if(!IsHelicopterMove()) {
				CallStopMoving();
			}

#endif
        }
		if(IsHelicopterMove()) {
			m_nMoveToTargetState = eMoveTurnToTarget;
		} else m_nMoveToTargetState = eMoveStop;
    }
    else if (nInRange == eInRangeBadAngleAlpha)
    {
#ifdef PLANE_EC
        CallMoveToPoint(uTarget.GetLocationX(), uTarget.GetLocationY());
#else
        if (IsMoving() && !IsMovingTurning())
        {
			if(!IsHelicopterMove()) {
				CallStopMoving();
            	m_nMoveToTargetState = eMoveStop;
			} else m_nMoveToTargetState = eMoveTurnToTarget;
            
        }
#ifdef INFANTRY_EC
        if (!IsMoving() && IsInAttackingAnimFrame() && (GetRelativeAngleTo(uTarget) <= 0x40))
        {
            //obroci sie sam
            if (IsEnemy(m_uTarget))
            {
                nShootCount = -1;
            }
            else
            {
                nShootCount = 1;
            }
            CallAttackTarget(m_uTarget, nShootCount);
			if(IsHelicopterMove()) {
				m_nMoveToTargetState = eMoveTurnToTarget;
			} else m_nMoveToTargetState = eMoveStop;
        }
#endif
        else
        {
            CallTurnToAngle(GetCannonAngleToTarget(uTarget));
            m_nMoveToTargetState = eMoveTurnToTarget;
        }
#endif
    }
    else if (nInRange == eInRangeTooClose)
    {
        if (!IsImmobileUnitOrCantMoveInCurrentState())
        {
            MoveAwayFromPoint(uTarget.GetLocationX(), uTarget.GetLocationY(), G2A(2));
            m_nMoveToTargetState = eMoveAwayFromTarget;
        }
    }
    else
    {
        if (!IsImmobileUnitOrCantMoveInCurrentState())
        {
            CallMoveToPoint(uTarget.GetLocationX(), uTarget.GetLocationY());
            m_nMoveToTargetState = eMoveToTarget;
            m_nMoveToTargetFlags = (1 << eMoveToTarget);
        }
    }
    return nInRange;
}//|

function void StoreHoldPos()
{
    m_nHoldPosX = GetLocationX();
    m_nHoldPosY = GetLocationY();
}//|

//wywolywane po zmianie camouflageMode
//jesli zostalo ustawione to zmieniamy attackMode na holdFire (o ile bylo na fireAtWill)
//jesli zostalo skasowane to przywracamy attackMode na fireAtWill (o ile nie zostalo wczesniej zmienione)
function void OnSetCamouflageMode(int nMode)
{
    if (nMode != 0)
    {
        if (attackMode == eModeFireAtWill)
        {
            attackMode = eModeHoldFire;
            m_bSetHoldFireInCamouflageMode = true;
            ChangedCommandState();
        }
    }
    else
    {
        if (m_bSetHoldFireInCamouflageMode)
        {
            attackMode = eModeFireAtWill;
            m_bSetHoldFireInCamouflageMode = false;
            ChangedCommandState();
        }
    }
}//|

function int IsInAttackState()
{
    if ((state == AttackingPoint) || (state == AttackingTarget) || (state == WaitToEndAttackPoint) || (state == WaitToEndAttackTarget)
#ifdef INFANTRY_EC
        || (state == InfantryAttackingPointStopMoving) || (state == InfantryWaitingToEndAttackPoint) || (state == InfantryWaitingToEndAttackTarget)
#endif
        )
    {

		return true;
    }
    return false;
}//|

function void StopAttacking()
{
#ifdef INFANTRY_EC
    CallStopAttack();
#else
    StopAttack();
#endif
    ResetAttackTarget();
}//|

function void StopCurrentActionAttacking()
{
    m_bIsMovingAndAttack = false;
    if (IsInAttackState())
    {
        StopAttacking();
    }
#ifndef INFANTRY_EC
    else
    {
        //jesli wydalismy rozkaz ataku na cos innego niz enemy to unit moze wyjsc ze stanu ataku zanim dzialo wystrzeli
        //i wtedy dzialo zostanie w stanie ataku gdy unit bedzie jechal (do czasu az bedzie mialo dobra pozycje do wystrzalu)
        //dlatego trzeba zatrzymac strzelanie inne niz auto (z cannona)
        StopNotAutoAttack();
    }
#endif
}//|

#ifndef INFANTRY_EC

function void SetCannonsAutoFire()
{
    if (attackMode == eModeFireAtWill)
    {
        SetCannonsAutoFire(true);
    }
    else
    {
        SetCannonsAutoFire(false);
        if ((state != AttackingTarget) || m_bAutoTarget)
        {
            StopAttack();
        }
    }
}//|

#endif

function int GetSurfaceTargetType()
{
    int nType;

    if (CanAttackLand())
    {
        if (CanAttackAir())
        {
            return eTargetTypeLand | eTargetTypeAir;
        }
        else
        {
            return eTargetTypeLand;
        }
    }
    else if (CanAttackAir())
    {
        return eTargetTypeAir;
    }
    return 0;
}//|

function unit FindBestTarget()
{
    int nIndex, nCount, nInRange;
    unit uTarget, uResult;
    int nDist, nRangeOfFire, nTargetX, nTargetY;

    if (FindTargets(GetSurfaceTargetType() | eTargetTypeAny | eTargetTypeDamagableOnly, 
                    GetEnemyIFF(), GetTargetPriorities(), eSortTypeRange, false) == 0)
    {
        return null;
    }
    nCount = GetFoundTargetsCount();
   	for (nIndex = 0; nIndex < nCount; ++nIndex)
    {
        uTarget = GetFoundTarget(nIndex);
        nInRange = IsTargetInRange(uTarget, true);
       
		if (nInRange == eInRangeGoodHit)
        {
            uResult = uTarget;
            break;
        }
        else if (IS_IN_ENTRENCHMENT_MODE())
        {
            continue;
        }
        else if (nInRange == eInRangeBadAngleAlpha)
        {
            if (uResult == null)
            {
                uResult = uTarget;
            }
        }
        else
        {
            if ((movementMode == eModeHoldPosition) || IsImmobileUnitOrCantMoveInCurrentState())
            {
                continue;
            }
            if (movementMode == eModeHoldArea)
            {
                nDist = DistanceTo(uTarget);
                nRangeOfFire = GetRangeOfFire();
            
			    if (nDist > (nRangeOfFire - eOneGridSize))
                {
                    //biezemy MoveTarget po to aby dobrze dzialalo gdy uTarget nas atakuje
                    if (uTarget.IsMoving())
                    {
                        uTarget.GetMoveTarget(nTargetX, nTargetY);
                    }
                    else
                    {
                        uTarget.GetLocation(nTargetX, nTargetY);
                    }
                    if (state == MovingToHoldAreaPos)
                    {
                        if ((DistanceTo(nTargetX, nTargetY) > (nRangeOfFire + G2A(eHoldAreaRange - 2))) ||
                            (Distance(m_nHoldPosX, m_nHoldPosY, nTargetX, nTargetY) > (nRangeOfFire + G2A(eHoldAreaRange - 2))))
                        {
                            continue;
                        }
                    }
                    else
                    {
                        if (DistanceTo(nTargetX, nTargetY) > (nRangeOfFire + G2A(eHoldAreaRange - 1)))
                        {
                            continue;
                        }
                    }
                }
            }
            uResult = uTarget;
        }
	}
	
		if (IsAirObject() && !IsTransporter() && CanAttackLand() && GetMaxHP()>=170) //Bombowiec
		{
				//uResult=null;
				for (nIndex = 0; nIndex < nCount; ++nIndex)
 			   {
  			      uTarget = GetFoundTarget(nIndex);
  			     // nInRange = IsTargetInRange(uTarget, true);
					 if (uTarget.IsBuilding() )
  	 		     {
  	 		       uResult = uTarget;
  	 		       break;
  	 		     }
				}
		}
		
		if (IsLandObject() && GetRangeOfFire()/eOneGridSize>15)//artlyeria
		{
			uResult=null;
				for (nIndex = 0; nIndex < nCount; ++nIndex)
 			   {
  			      uTarget = GetFoundTarget(nIndex);
  			     nInRange = IsTargetInRange(uTarget, true);
					 if (uTarget.IsBuilding() )
  	 		     {
  	 		       uResult = uTarget;
  	 		       break;
  	 		     }
				}
		}			
		
		if (IsAirObject() && IsTransporter() && GetMaxHP()>550)//Flota
		{
			uResult=null;
			for (nIndex = 0; nIndex < nCount; ++nIndex)
			{
				uTarget = GetFoundTarget(nIndex);
				nInRange = IsTargetInRange(uTarget, true);
			 	if (uTarget.GetMaxHP()>500)
   	    	 	{
     	  	  	 	uResult = uTarget;
    	   	  		 break;
       		 	}
			}
		}	
	

    ClearFoundTargetsArray();
    return uResult;
}//|

//szukamy celu o priorytecie wyzszym niz dotychczasowy (tylko takie ktore sa w zasiegu)
function unit FindBetterTarget(unit uCurrTarget)
{
    int nIndex, nCount, nInRange, nCurrPriority, nTargetPriorities;
    unit uTarget, uResult;
	string UnitIDName;
	
    ASSERT(uCurrTarget);
    nTargetPriorities = GetTargetPriorities();
    nCurrPriority = GetTargetPriority(uCurrTarget, nTargetPriorities);
    if (nCurrPriority >= CalcMaxTargetPriority(nTargetPriorities))
    {
        //nie mozna juz znalezc lepszego
        return null;
    }
    if (FindTargets(GetSurfaceTargetType() | 
#ifdef PLANE_EC
                    eTargetTypePlane | 
#else
                    eTargetTypeAny | 
#endif
                    eTargetTypeDamagableOnly, GetEnemyIFF(), nTargetPriorities, eSortTypeRange, false) == 0)
    {
        return null;
    }
    nCount = GetFoundTargetsCount();


		if ((IsAirObject() && !IsTransporter() && CanAttackLand() && GetMaxHP()>=170) || (IsLandObject() && GetRangeOfFire()/eOneGridSize>15)) //Bombowiec lub artyleria
		{
				for (nIndex = 0; nIndex < nCount; ++nIndex)
 			   {
  			      uTarget = GetFoundTarget(nIndex);
  			      //nInRange = IsTargetInRange(uTarget, true);
				  UnitIDName=uTarget.GetObjectIDName();
				  if (uTarget.IsBuilding() && (!UnitIDName.Compare("LC_XENO_PLANT") || !UnitIDName.Compare("ED_POWER_PLANT") || !UnitIDName.Compare("UCS_NUCLEAR_PLANT")))
  	 		     {
  	 		       uResult = uTarget;
  	 		       break;
  	 		     }
			}
		}
		else
		if (IsAirObject() && IsTransporter() && GetMaxHP()>550)//Flota
		{
			for (nIndex = 0; nIndex < nCount; ++nIndex)
			{
				uTarget = GetFoundTarget(nIndex);
				nInRange = IsTargetInRange(uTarget, true);
			 	if (uTarget.GetMaxHP()>800)
   	    	 	{
     	  	  	 	uResult = uTarget;
    	   	  		 break;
       		 	}
			}
		}
		else
		for (nIndex = 0; nIndex < nCount; ++nIndex)
    	{
   	  	   uTarget = GetFoundTarget(nIndex);
   	 	    if (GetTargetPriority(uTarget, nTargetPriorities) <= nCurrPriority)
      	  {
         		   //pozostale cele maja tez mniejszy (lub rowny) priorytet wiec nie szukamy dalej
         		   break;
      	  }
      		 nInRange = IsTargetInRange(uTarget, true);
      		 if ((nInRange == eInRangeGoodHit) || (nInRange == eInRangeBadAngleAlpha))
        {
            uResult = uTarget;
            break;
        }
    }
    ClearFoundTargetsArray();
    return uResult;
}//|

function int FindNothingTarget(int bStoreHoldPos)
{   
    unit uTarget;

    if ((attackMode != eModeFireAtWill) || !HaveCannonAndCanAttackInCurrentState()
#ifdef PLANE_EC
        || (GetCannonType() == eBomb)
#endif
       )
    {

        return false;
    }
    uTarget = FindBestTarget();
    if (uTarget != null)
    {

        if (bStoreHoldPos)
        {
            StoreHoldPos();
        }
        AutoSelectBestHeroWeaponForTarget(uTarget);
        SetTarget(uTarget, true);
        StartMoveToAttackTarget(uTarget, true);
        state AttackingTarget;
        SetStateDelay(0);
        return true;
    }
    return false;
}//|

function int FindNothingTarget()
{   
    return FindNothingTarget(true);
}//|

function void CheckArmedState(int bArmed)
{
    if (bArmed)
    {
        if (!m_bArmedState)
        {
            SetArmedState(true);
            m_bArmedState = true;
        }
    }
    else
    {
        if (m_bArmedState)
        {
            SetArmedState(false);
            m_bArmedState = false;
        }
    }
}//|

function void CheckArmedState()
{
    //nie sprawdzamy HaveCannon bo wiekszosc unitow ma a te ktore nie maja zawsze zwroca WasAnyEnemyInLastStepVisibility=FALSE (bo nie jest sprawdzane)
    //a poza tym SetArmedState dla nich nic nie robi
    if (WasAnyEnemyInLastStepVisibility())
    {
        if (!m_bArmedState)
        {
            SetArmedState(true);
            m_bArmedState = true;
        }
    }
    else if ((state != AttackingPoint) && (state != AttackingTarget))
    {
        if (m_bArmedState)
        {
            SetArmedState(false);
            m_bArmedState = false;
        }
    }
}//|

function void RaidAttack() {

				int pomX,pomY;
   				int x1,x2,y1,y2,a,b,d;
				int nX, nY;

				pomX=m_uTarget.GetLocationX()-GetLocationX();
				pomY=m_uTarget.GetLocationY()-GetLocationY();
				
				d=GetRangeOfFire()+600;
				
				if(pomX==0) {
					nX=m_uTarget.GetLocationX();
					if(pomY<0) nY=m_uTarget.GetLocationY()-d;
						else  nY=m_uTarget.GetLocationY()+d;
				}
				else if(pomY==0){
					nY=m_uTarget.GetLocationY();
					if(pomX>0) 	nX=m_uTarget.GetLocationX()+d;
						else nX=m_uTarget.GetLocationX()-d;
				}
				else {
		  
			  		x1=GetLocationX();
					y1=GetLocationY();
					x2=m_uTarget.GetLocationX();
					y2=m_uTarget.GetLocationY();

					a =((y2-y1)*100)/(x2-x1);
					b = y1 - (a*x1)/100;
					
					//wyliczenie x
					nX=sqrt((d*d)/(1+(a*a)/10000));
				
				
					if(pomX>0) nX=m_uTarget.GetLocationX()+nX;
						else nX=m_uTarget.GetLocationX()-nX;
		
					nY=(a*nX)/100+b;
	
				}
				m_nMoveToX = nX;
				m_nMoveToY = nY;
				CallMoveToPoint(nX,  nY);
				//CallHelicopterFlyToPoint(nX, nY,GetLandHeight(nX,nY)+400, 0);
}//

////    States    ////

state AttackingPoint
{
    int nInRange;
    int nX, nY, nMoveToX, nMoveToY;

#ifdef PLANE_EC
    if (MustBackToAirportForRefuel() || IsOutOfAmmo())
    {
        StopAttacking();
        EndCommand(true);
        return Nothing, 0;
    }
#endif

    nInRange = IsPointInRange(m_nTargetX, m_nTargetY);
    if (nInRange == eInRangeGoodHit)
    {
#ifdef INFANTRY_EC
        if (IsMoving())
        {
            CallStopMoving();
            return InfantryAttackingPointStopMoving, 5;
        }
        else
        {
			CallAttackPoint(m_nTargetX, m_nTargetY, 1);
            return InfantryWaitingToEndAttackPoint, 5;
        }
#else
#ifdef PLANE_EC
        CallMoveToPoint(m_nTargetX, m_nTargetY);
#else
        if (IsMoving())
        {
			if(!IsHelicopterMove()) {
           		 CallStopMoving();
			} else {
				 m_nMoveToX = m_nTargetX;
				m_nMoveToY = m_nTargetY;
			}
        }
#endif
        AttackPoint(m_nTargetX, m_nTargetY, 1);
        return WaitToEndAttackPoint, 40;
#endif
    }
#ifdef INFANTRY_EC
    else if (nInRange == eInRangeBadAngleAlpha)
    {
        if (IsAttacking())
        {
            //sam sie obroci
            return AttackingPoint, 5;
        }
        else if (!IsMoving() && IsInAttackingAnimFrame() && (GetRelativeAngleTo(m_nTargetX, m_nTargetY) <= 0x40))
        {
            //obroci sie sam
            CallAttackPoint(m_nTargetX, m_nTargetY, 1);
            return InfantryWaitingToEndAttackPoint, 5;
        }
    }
#endif
    if (IS_IN_ENTRENCHMENT_MODE())
    {
        EndCommand(true);
        return Nothing, 0;
    }
    if (nInRange == eInRangeBadAngleAlpha)
    {
        TRACE1("eInRangeBadAngleAlpha");
        if (IsMoving() && (m_nMoveToTargetState == eMoveAwayFromTarget) &&
            (DistanceTo(m_nTargetX, m_nTargetY) <= 0x100))
        {
            TRACE1(" Let go");
            //pozwalamy mu odejsc
            return AttackingPoint, 2;
        }
        TRACE1(" !way");
#ifdef PLANE_EC
        CallMoveToPoint(m_nTargetX, m_nTargetY);
#else
        if (IsMoving() && !IsMovingTurning())
        {
            TRACE1(" stop");
			if(!IsHelicopterMove()) {
            	CallStopMoving();
            	m_nMoveToTargetState = eMoveStop;
			}
        }
        else
        {
            TRACE1(" turn");
            CallTurnToAngle(GetCannonAngleToPoint(m_nTargetX, m_nTargetY));
            m_nMoveToTargetState = eMoveTurnToTarget;
        }
#endif
        return AttackingPoint, 2;
    }
    if (IsImmobileUnitOrCantMoveInCurrentState())
    {
        EndCommand(true);
        return Nothing, 0;
    }
    if (!IsMoving())
    {
        ++m_nMoveToAttackCnt;
        if (m_nMoveToAttackCnt > 5)
        {
            TRACE1("AttackingPoint->(m_nMoveToAttackCnt > 5)->Nothing");
            StopAttacking();
            EndCommand(true);
            return Nothing, 0;
        }
    }
    else
    {
        m_nMoveToAttackCnt = 0;
    }
    if (nInRange == eInRangeTooClose)
    {
        MoveAwayFromPoint(m_nTargetX, m_nTargetY, G2A(2));
        m_nMoveToTargetState = eMoveAwayFromTarget;
        return AttackingPoint, 5;
    }
    if ((m_nMoveToTargetState == eMoveToTarget) && IsMoving())
    {
        return AttackingPoint, 5;
    }
    if (nInRange == eNotInRange)
    {
		m_nMoveToTargetState = eMoveToTarget;
        CallMoveToPoint(m_nTargetX, m_nTargetY);
        return AttackingPoint, 5;
    }
    if ((m_nMoveToTargetState != eMoveAroundTarget) || !IsMoving())
    {
        nX = GetLocationX();
        nY = GetLocationY();
        if (((A2G(nX) == A2G(m_nTargetX)) && (A2G(nY) == A2G(m_nTargetY))) ||
            (DistanceTo(m_nTargetX, m_nTargetY) <= 0x180))
        {
            MoveAwayFromPoint(m_nTargetX, m_nTargetY, G2A(2));
            m_nMoveToTargetState = eMoveAwayFromTarget;
        }
        else
        {
            //jazda do punktu o 90stopni
            nMoveToX = m_nTargetX - (nY - m_nTargetY);
            nMoveToY = m_nTargetY + (nX - m_nTargetX);
            TRACE4(GetUnitRef(), "AttackingPoint -> MoveAround", nMoveToX, nMoveToY);
            CallMoveToPoint(nMoveToX, nMoveToY);
            m_nMoveToTargetState = eMoveAroundTarget;
        }
    }
    return AttackingPoint, 5;
}//|

state WaitToEndAttackPoint
{
    ResetAttackTarget();
   EndCommand(true);
    return Nothing, 0;
}//|

#ifdef INFANTRY_EC

state InfantryAttackingPointStopMoving
{

	if (IsMoving())
    {	
        return InfantryAttackingPointStopMoving, 5;
    }
    else
    {
        if (IsPointInRange(m_nTargetX, m_nTargetY) == eInRangeGoodHit)
        {
            CallAttackPoint(m_nTargetX, m_nTargetY, 1);
            return InfantryWaitingToEndAttackPoint, 5;
        }
        else
        {
            StartMoveToAttackPoint(m_nTargetX, m_nTargetY);
            return AttackingPoint, 5;
        }
    }
}//|

state InfantryWaitingToEndAttackPoint
{
    if (IsAttacking())
    {
        return InfantryWaitingToEndAttackPoint, 5;
    }
    else
    {
        ResetAttackTarget();
        EndCommand(true);
        return Nothing, 0;
    }
}//|

#endif

state AttackingTarget
{
    int nInRange, bIsVisible;
    unit uTarget;
    int nX, nY, nMoveToX, nMoveToY;
	
    TRACE1("AttackingTarget");
	
	if(IsHelicopterMove())  {
		SetAttackTarget(null);
	}
    //ponizej nie robimy (m_bAutoTarget || m_bEnemyTarget) ze wzgledu na chaos device
    if ((m_uTarget == null) || !m_uTarget.IsLive() ||  
        (!IsEnemy(m_uTarget) && m_bEnemyTarget))
    {
        TRACE2("    ->!IsLive/Enemy ", m_uTarget);
        StopAttacking();
        if (!m_bAutoTarget)
        {
            EndCommand(true);
        }
        return EndAttackingTarget, 0;
    }
    bIsVisible = IsVisible(m_uTarget);
    if (!bIsVisible)
    {
        if (m_nLastNotVisibleTargetTick == 0)
        {
            m_nLastNotVisibleTargetTick = GetWorldTick();
        }
        else
        {
            if ((GetWorldTick() - m_nLastNotVisibleTargetTick) > eAttackNotVisibleDelayTicks)
            {
                TRACE2("    ->!IsVisible ", m_uTarget);
                StopAttacking();
                if (!m_bAutoTarget)
                {
                    EndCommand(true);
                }
                return EndAttackingTarget, 0;
            }
        }
    }
    else
    {
        m_nLastNotVisibleTargetTick = 0;
    }
#ifdef PLANE_EC
    if (MustBackToAirportForRefuel() || IsOutOfAmmo())
    {
        StopAttacking();
        if (!m_bAutoTarget)
        {
            EndCommand(true);
        }
        return Nothing, 0;
    }
#endif
    if (!m_uTarget.IsStored())
    {
        uTarget = m_uTarget.GetObjectContainingObject();
        if (!uTarget)
        {
            StopAttacking();
            if (!m_bAutoTarget)
            {
                EndCommand(true);
            }
            return EndAttackingTarget, 0;
        }
        AutoSelectBestHeroWeaponForTarget(uTarget);
        m_uTarget = uTarget;
        SetAttackTarget(m_uTarget);
    }

    if (m_bAutoTarget)
    {
        if (m_nFindNewTargetCounter <= 0)
        {
			if(!IsHelicopterMove()) {
            	m_nFindNewTargetCounter = eFindNewTargetCounter;
			} else  m_nFindNewTargetCounter = eFindNewTargetCounterHelicopter;
			
            uTarget = FindBetterTarget(m_uTarget);
            if (uTarget != null)
            {
                AutoSelectBestHeroWeaponForTarget(uTarget);
                m_uTarget = uTarget;
				if(IsHelicopterMove())  {
					bIsVisible=true;
					SetAttackTarget(null);
				}
				 else 
				{

					SetAttackTarget(uTarget);
				}
            }
        }
        else
        {
            --m_nFindNewTargetCounter;
        }
    }
	if(IsHelicopterMove()) nInRange = IsTargetInRange(m_uTarget, false);
	else nInRange = IsTargetInRange(m_uTarget, m_bAutoTarget);
	
    if (((nInRange == eInRangeGoodHit ) || (IsHelicopterMove() && (nInRange == eInRangeBadAngleAlpha ||  nInRange == eInRangeTooClose))) && bIsVisible)
    {
		if(!IsHelicopterMove) m_nMoveToTargetState = 0;
		else m_nMoveToTargetState = 1;
		
#ifdef INFANTRY_EC
        if (IsMoving() && !uTarget.IsBuilding())
        {
            if (m_uTarget.IsMoving() && (GetTargetDirectionDiff(m_uTarget) <= 0x50) && (DistanceTo(m_uTarget) >= (GetRangeOfFire() - G2A(3))))
            {
                //podjezdzamy jeszcze blizej bo moze ucieka
                TRACE1("    ->target in range escaping -> moving closer ");
            }
            else
            {
                TRACE1("    ->target in range -> stop");
                CallStopMoving();
            }
        }
        else
        {
			if (IsEnemy(m_uTarget))
            {
                CallAttackTarget(m_uTarget, -1);
				sUnitIDName=GetObjectIDName();
				if(!sUnitIDName.Compare("UCS_SILVER_EXP_1"))
				{
					return InfantryWaitingToEndAttackTarget;
				}
            }
            else
            {
                CallAttackTarget(m_uTarget, 1);
				sUnitIDName=GetObjectIDName();
				if(!sUnitIDName.Compare("UCS_SILVER_EXP_1"))
				{
					return InfantryWaitingToEndAttackTarget;
				}
				else
  	             return InfantryWaitingToEndAttackTarget, 5;
				 
            }
        }
        return AttackingTarget, 5;
#else

        if (IsMoving())
        {
            if (m_uTarget.IsMoving() && (GetTargetDirectionDiff(m_uTarget) <= 0x60) && (DistanceTo(m_uTarget) >= (GetRangeOfFire() - G2A(3))))
            {
                //podjezdzamy jeszcze blizej bo moze ucieka
                TRACE1("    ->target in range escaping -> moving closer ");
            }
            else
            {
                TRACE1("    ->target in range -> stop");
				
#ifdef PLANE_EC
                CallMoveToPoint(m_uTarget.GetLocationX(), m_uTarget.GetLocationY());
#else
			if(!IsHelicopterMove() || IsTransporter()) {
				CallStopMoving();
			}
#endif
            }
        }

		if(IsHelicopterMove() && !IsTransporter)
		{
			RaidAttack();
			AttackTarget(m_uTarget, -1, false);
			return MovingBeforeAttack, 60;
		}
		
		m_nMoveToX = m_nTargetX;
		m_nMoveToY = m_nTargetY;
		
		AttackTarget(m_uTarget, -1, false);
		return AttackingTarget, 5;
#endif
    }
#ifdef INFANTRY_EC
    else if (nInRange == eInRangeBadAngleAlpha)
    {
        if (IsAttacking())
        {
            sUnitIDName=GetObjectIDName();
			if(!sUnitIDName.Compare("UCS_SILVER_EXP_1"))
			{
				return InfantryWaitingToEndAttackTarget;
			}
			//sam sie obroci
            return AttackingTarget, 5;
        }
        else if (!IsMoving() && IsInAttackingAnimFrame() && (GetRelativeAngleTo(m_uTarget) <= 0x40))
        {
            //obroci sie sam
            if (IsEnemy(m_uTarget))
            {
                CallAttackTarget(m_uTarget, -1);
                sUnitIDName=GetObjectIDName();
				if(!sUnitIDName.Compare("UCS_SILVER_EXP_1"))
				{
					return InfantryWaitingToEndAttackTarget;
				}
				return AttackingTarget, 5;
            }
            else
            {
                CallAttackTarget(m_uTarget, 1);
				sUnitIDName=GetObjectIDName();
				if(!sUnitIDName.Compare("UCS_SILVER_EXP_1"))
				{
					return InfantryWaitingToEndAttackTarget;
				}
				else
                return InfantryWaitingToEndAttackTarget, 5;
            }
        }
    }
#endif
    if (IS_IN_ENTRENCHMENT_MODE())
    {
        StopAttacking();
        if (!m_bAutoTarget)
        {
            EndCommand(true);
        }
        return EndAttackingTarget, 0;
    }
    if (nInRange == eInRangeBadAngleAlpha)
    {
        if (IsMoving() && (m_nMoveToTargetState == eMoveAwayFromTarget) &&
            (DistanceTo(m_uTarget) <= 0x100))
        {
            //pozwalamy mu odejsc
            return AttackingTarget, 2;
        }
#ifdef PLANE_EC
        CallMoveToPoint(m_uTarget.GetLocationX(), m_uTarget.GetLocationY());
#else
        if (IsMoving() && !IsMovingTurning())
        {
            	CallStopMoving();
            	m_nMoveToTargetState = eMoveStop;
        }
        else
        {
            CallTurnToAngle(GetCannonAngleToTarget(m_uTarget));
            m_nMoveToTargetState = eMoveTurnToTarget;
        }
#endif
        return AttackingTarget, 2;
		
    }
    if (IsImmobileUnitOrCantMoveInCurrentState())
    {
        StopAttacking();
        if (!m_bAutoTarget)
        {
            EndCommand(true);
        }
        return EndAttackingTarget, 0;
    }
    TRACE1("  ->!InRange");
    if (m_bAutoTarget)
    {
		if(!IsHelicopterMove()) {
	        if ((movementMode == eModeHoldPosition) || IsImmobileUnitOrCantMoveInCurrentState())
	        {
	            TRACE1("    ->holdPos->Stop");
	            StopAttacking();
	            if (IsMoving())
	            {
#ifdef PLANE_EC
                	CallMoveToPoint(m_uTarget.GetLocationX(), m_uTarget.GetLocationY());
#else
					CallStopMoving();
#endif
	            }
	            return EndAttackingTarget, 0;
       		}
		}
		
		if ((movementMode == eModeHoldArea) && ((IsHelicopterMove() && DistanceTo(m_nHoldPosX, m_nHoldPosY) > G2A(eHoldAreaRangeHelicopter)) || (!IsHelicopterMove() && DistanceTo(m_nHoldPosX, m_nHoldPosY) > G2A(eHoldAreaRange))))
        {
            TRACE1("    ->holdArea->Dist>range->Stop");
            StopAttacking();
            return EndAttackingTarget, 0;
        }
    }
    if (!IsMoving())
    {
        ++m_nMoveToAttackCnt;
     	if (m_nMoveToAttackCnt > 5)
        {
            TRACE1("AttackingTarget->(m_nMoveToAttackCnt > 5)->StopAttacking");
            StopAttacking();
            if (!m_bAutoTarget)
            {
                EndCommand(true);
            }
            return EndAttackingTarget, 0;
        }
    }
    else
    {
        m_nMoveToAttackCnt = 0;
    }
    if (m_nMoveToTargetState == 0 && !IsHelicopterMove())
    {
        StartMoveToAttackTarget(m_uTarget, m_bAutoTarget);
        return AttackingTarget, 5;
    }
    m_nTargetX = m_uTarget.GetLocationX();
    m_nTargetY = m_uTarget.GetLocationY();
    if (nInRange == eInRangeTooClose)
    {
       	MoveAwayFromPoint(m_nTargetX, m_nTargetY, G2A(2));
      	m_nMoveToTargetState = eMoveAwayFromTarget;
		 return AttackingTarget, 5;
    }
    if ((nInRange == eNotInRange) || 
        ((m_nMoveToTargetState == eMoveToTarget) && IsMoving()))
    {
        CallMoveToPoint(m_nTargetX, m_nTargetY);
        return AttackingTarget, 5;
    }
    if ((m_nMoveToTargetState != eMoveAroundTarget) || !IsMoving())
    {
        nX = GetLocationX();
        nY = GetLocationY();
        if (((A2G(nX) == A2G(m_nTargetX)) && (A2G(nY) == A2G(m_nTargetY))) ||
            (DistanceTo(m_nTargetX, m_nTargetY) <= 0x180))
        {
            MoveAwayFromPoint(m_nTargetX, m_nTargetY, G2A(2));
            m_nMoveToTargetState = eMoveAwayFromTarget;
        }
        else
        {
            //jazda do punktu o 90stopni
            nMoveToX = m_nTargetX - (nY - m_nTargetY);
            nMoveToY = m_nTargetY + (nX - m_nTargetX);
            TRACE4(GetUnitRef(), "AttackingPoint -> MoveAround", nMoveToX, nMoveToY);
            CallMoveToPoint(nMoveToX, nMoveToY);
            m_nMoveToTargetState = eMoveAroundTarget;
        }
    }
    if (!m_bNotifiedMusic && (DistanceTo(m_uTarget) < G2A(7)))
    {
        m_bNotifiedMusic = true;
        CheckAttackMusicForTarget(m_uTarget);
    }

    return AttackingTarget, 5;
}//|

state WaitToEndAttackTarget
{

	ResetAttackTarget();
    if (!m_bAutoTarget)
    {
        EndCommand(true);
    }
    return EndAttackingTarget, 0;
}//|

#ifdef INFANTRY_EC

state InfantryWaitingToEndAttackTarget
{
	sUnitIDName=GetObjectIDName();
	if(!sUnitIDName.Compare("UCS_SILVER_EXP_1"))
	{
		KillObject();
	}
    if (IsAttacking())
    {
		return InfantryWaitingToEndAttackTarget, 5;
    }
    else
    {
        ResetAttackTarget();
        if (!m_bAutoTarget)
        {
            EndCommand(true);
        }
        return EndAttackingTarget, 0;
    }
}//|

#endif

state EndAttackingTarget
{
    int nDist;

	TRACE1("EndAttackingTarget");
    if (IS_IN_ENTRENCHMENT_MODE() || IsImmobileUnitOrCantMoveInCurrentState())
    {
        m_bIsMovingAndAttack = false;
        return Nothing, 0;
    }
    if (!m_bAutoTarget)
    {
        TRACE1("    ->!Auto->Nothing");
        m_bIsMovingAndAttack = false;
        return Nothing, 0;
    }
    if (m_bIsMovingAndAttack)
    {
        TRACE1("  ->m_bIsMovingAndAttack");
        //szukamy nowego celu
        if (FindNothingTarget())//robimy StoreHoldPos
        {
            TRACE1("    ->FindNothingTarget");
            return state, GetStateDelay();//state ustawiony w FindNothingTarget
        }
        TRACE1("    ->MovingAndAttack");
        CallMoveToPoint(m_nMoveToX, m_nMoveToY);
        return MovingAndAttack, 5;
    }
#ifndef PLANE_EC
    else if (movementMode == eModeHoldArea)
    {
        TRACE1("  ->eModeHoldArea");
        //sprawdzamy czy w poblizu jest inny cel
        nDist = DistanceTo(m_nHoldPosX, m_nHoldPosY);
        if (nDist < G2A(eHoldAreaRange/2))
        {
            if (FindNothingTarget(false))
            {
                TRACE1("    ->FindNothingTarget");
                return state, GetStateDelay();//state ustawiony w FindNothingTarget
            }
        }
        m_bIsMovingAndAttack = false;
        if (nDist > eHalfGridSize)
        {
            TRACE1("    ->MovingToHoldAreaPos");
            CallMoveToPoint(m_nHoldPosX, m_nHoldPosY);
            return MovingToHoldAreaPos, 5;
        }
        else
        {
            TRACE1("    ->Nothing");
            return Nothing, 0;
        }
    }
#endif
    else
    {
        TRACE1("    ->Nothing");
        m_bIsMovingAndAttack = false;
        return Nothing, 0;
    }
}//|

state MovingToHoldAreaPos
{
	if (IsMoving() || IsStartingMoving())
	{
		TRACE("MovingToHoldAreaPos\n");
        //sprawdzamy czy w poblizu jest inny cel
        if (DistanceTo(m_nHoldPosX, m_nHoldPosY) < G2A(eHoldAreaRange - 3))
        {
            if (FindNothingTarget(false))
            {
                TRACE("   ->AttackingTarget\n");
                return state, GetStateDelay();//state ustawiony w FindNothingTarget
            }
        }
        return MovingToHoldAreaPos;
	}
	else
	{
		TRACE("MovingToHoldAreaPos -> Nothing\n");
        //to bylo z m_bAutoTarget
		return Nothing, 0;
	}
}//|

state MovingAndAttack
{
	if (IsMoving() || IsStartingMoving())
	{
		TRACE("MovingAndAttack\n");
        //szukamy nowego celu
        if (FindNothingTarget())//robimy StoreHoldPos
        {
            TRACE("   ->AttackingTarget\n");
            return state, GetStateDelay();//state ustawiony w FindNothingTarget
        }
        return MovingAndAttack;
	}
	else
	{
		TRACE("MovingAndAttack -> Nothing\n");
        m_bIsMovingAndAttack = false;
		EndCommand(true);
		return Nothing, 0;
	}
}//|


state MovingBeforeAttack {

		int pomX,pomY,nX,nY;
		int d,x1,x2,y1,y2,a,b,moveDist,rand;
			
			GetMoveTarget(nX, nY);

			if(DistanceTo(nX, nY)>=400)
			if (IsMoving() || IsStartingMoving()) {
				return MovingBeforeAttack, 0;
			}
			
			pomX=m_uTarget.GetLocationX()-GetLocationX();
			pomY=m_uTarget.GetLocationY()-GetLocationY();
			
			d=GetRangeOfFire()+800; //odleglosc od celu na ktora maja odjechac
			
			x1=GetLocationX();
			y1=GetLocationY();
			x2=m_uTarget.GetLocationX();
			y2=m_uTarget.GetLocationY();
			
			moveDist=600; //przesunięcie w bok
			
			rand =Rand(2);
			
			if(rand==0) {
				if(pomX>0) {
					if(pomY>0) {
						x1=x1-moveDist;
						y1=y1+moveDist;
					} else {
						x1=x1+moveDist;
						y1=y1+moveDist;
					}
				}else {
					if( pomY>0) {
						x1=x1-moveDist;
						y1=y1-moveDist;
					} else {
						x1=x1+moveDist;
						y1=y1-moveDist;
					}
				}
			}
			else {
				if(pomX>0) {
					if(pomY>0) {
						x1=x1+moveDist;
						y1=y1-moveDist;
					} else {
						x1=x1-moveDist;
						y1=y1-moveDist;
					}
				}else {
					if( pomY>0) {
						x1=x1+moveDist;
						y1=y1+moveDist;
					} else {
						x1=x1-moveDist;
						y1=y1+moveDist;
					}
				}
			}
	
			a =((y2-y1)*100)/(x2-x1);
			b = y1 - (a*x1)/100;
			
			//wyliczenie x
			nX=sqrt((d*d)/(1+(a*a)/10000));
		
			if(pomX>0) nX=m_uTarget.GetLocationX()-nX;
				else nX=m_uTarget.GetLocationX()+nX;

			nY=(a*nX)/100+b;
			
			m_nMoveToX = nX;
			m_nMoveToY = nY;
	  		CallMoveToPoint(nX,  nY);
			return AttackingTarget, 20;
}


////    Commands    ////

command Attack(unit uTarget) button TRL_ATTACK item ITEM_ATTACK priority PRIOR_ATTACK
{
    unit uTarget2, uInside;

    uTarget2 = uTarget;
    if (!uTarget2.IsLive())
    {
        return false;
    }
    if (!uTarget2.IsStored())
    {
        uInside = uTarget2.GetObjectContainingObject();
        if (!uInside)
        {
            return false;
        }
        uTarget2 = uInside;
    }
    AutoSelectBestHeroWeaponForTarget(uTarget2);
    if (!HaveCannonAndCanAttackInCurrentState() || !CanDamageObject(uTarget2) || !uTarget2.IsLive() || (uTarget2 == GetUnitRef()))
    {
        return false;
    }
    if (uTarget2.IsLandObject())
    {
        if (!CanAttackLand())
        {
            return false;
        }
    }
    else
    {
        if (!CanAttackAir())
        {
            return false;
        }
    }
    if ((m_uTarget == uTarget2) && (state == AttackingTarget) && !m_bAutoTarget)
    {
        EndCommand(true);
        return true;
    }
#ifdef PLANE_EC
    if (!HaveEnoughFuelToExecuteCommands() || IsOutOfAmmo())
    {
        return false;
    }
#endif
    CHECK_STOP_CURR_ACTION(eCommandAttack);
    SetTarget(uTarget2, false);
    StartMoveToAttackTarget(uTarget2, false);
    state AttackingTarget;
   	SetStateDelay(0);

	 return true;	
}//|

command AttackPoint(int nX, int nY) hidden
{
    AutoSelectBestHeroWeaponForTarget(nX, nY);
    if (!HaveCannonAndCanAttackInCurrentState())
    {
        return false;
    }
    if (!CanAttackLand())
    {
        return false;
    }
#ifdef PLANE_EC
    if (!HaveEnoughFuelToExecuteCommands() || IsOutOfAmmo())
    {
        return false;
    }
#endif
    CHECK_STOP_CURR_ACTION(eCommandAttackPoint);
	SetPointTarget(nX, nY);
    StartMoveToAttackPoint(nX, nY);
    m_nMoveToAttackCnt = 0;
    state AttackingPoint;
    SetStateDelay(0);
    return true;
}//|

function int MakeCommandMoveAttack(int nCommand, int nX, int nY)
{
    TRACE2("command MoveAttack", GetUnitRef());
    if (IS_IN_ENTRENCHMENT_MODE())
    {
        return false;
    }
    if (!HaveCannonAndCanAttackInCurrentState())
    {
        CHECK_STOP_CURR_ACTION(nCommand);
        MoveToPoint(nX, nY);
	    state Moving;
    }
#ifdef PLANE_EC
    if (!HaveEnoughFuelToExecuteCommands() || IsOutOfAmmo())
    {
        return false;
    }
    if (GetCannonType() == eBomb)
    {
        CHECK_STOP_CURR_ACTION(nCommand);
	    SetPointTarget(nX, nY);
        StartMoveToAttackPoint(nX, nY);
        m_nMoveToAttackCnt = 0;
        state AttackingPoint;
        SetStateDelay(0);
        return true;
    }
#endif
    if ((state == AttackingTarget) && m_bAutoTarget)
    {
        m_nMoveToX = nX;
        m_nMoveToY = nY;
        m_bIsMovingAndAttack = true;
        //dalej zostajemy w stanie AttackingTarget
    }
    else
    {
        CHECK_STOP_CURR_ACTION(nCommand);
        MoveToPoint(nX, nY);
        m_bIsMovingAndAttack = true;
        SetStateDelay(0);
        state MovingAndAttack;
    }
    return true;
}//|

//idziemy do punktu nX,Y a jesli po drodze sa wrogowie to ich atakujemy
command MoveAttack(int nX, int nY) hidden
{
    return MakeCommandMoveAttack(eCommandMoveAttack, nX, nY);
}//|

command MoveAttackDblClk(int nX, int nY) hidden
{
    return MakeCommandMoveAttack(eCommandMoveAttackDblClk, nX, nY);
}//|

command SetAttackMode(int nMode) button attackMode priority PRIOR_ATTACKMODE
{
    if (nMode == -1)
    {
        attackMode = (attackMode + 1) % 2;
    }
    else
    {
        attackMode = nMode;
    }
    m_bSetHoldFireInCamouflageMode = false;
#ifndef INFANTRY_EC
    SetCannonsAutoFire();
#endif
    EndCommand(true);
    return true;
}//|

#ifndef PLANE_EC
command SetMovementMode(int nMode) button movementMode priority PRIOR_MOVEMENTMODE
{
#ifdef HAVEMOVEMENTMODE
    if (!HaveCannon() && !HAVEMOVEMENTMODE)
    {
        return false;
    }
#else
    if (!HaveCannon())
    {
        //moze przyjsc przy zaznaczeniu kilku - nie zmieniamy movementMode dla cywili aby sie im nie ustawilo SetCanBeWithdraw(false)
        return false;//zeby 
    }
#endif
    if (nMode == -1)
    {
        movementMode = (movementMode + 1) % 2;
    }
    else
    {
        movementMode = nMode;
    }
    if (movementMode == eModeHoldPosition)
    {
        SetCanBeWithdraw(false);
    }
    else
    {
        SetCanBeWithdraw(true);
    }
    EndCommand(true);
    return true;
}//|
#endif

#endif
